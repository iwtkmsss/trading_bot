from contextlib import suppress
from math import ceil

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from third_bot.filters import CallData
from third_bot.keyboards import mammoth_control_kb, cancel_action, back_to_main_menu, main_worker_kb, PaginatorMammoths
from third_bot.keyboards.worker.inline import paginator_mammoths
from third_bot.misc import BDB, currency_to_usd, WorkerActionState, info_mammoth, rek_withdrawal

router = Router()


@router.callback_query(CallData("depconfirm"))
async def dep_confirm_call(callback_query: CallbackQuery):
    data = callback_query.data.split("_")
    mammoth_id = data[1]
    rep_id = data[2]
    replenishments = await BDB.get_replenishment(mammoth_id)

    replenishment = replenishments.split(",")
    for rep in replenishment:
        r = rep.split(";")
        bool_r = bool(rep_id in r)
        if bool_r:
            r[6] = "confirmed"
            replenishment.remove(rep)
            balance = await BDB.get_balance(mammoth_id)
            if r[4] == "card":
                currency = r[1]
                await BDB.update_balance(mammoth_id, (balance + currency_to_usd(currency, int(r[0]))))
            else:
                await BDB.update_balance(mammoth_id, (balance + int(r[0])))

            r = ";".join(r)
            replenishment.append(r)

            await BDB.update_replenishment(mammoth_id, ",".join(replenishment))
            await callback_query.message.edit_text(text="‚úÖ –ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç—É —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω.")
            return


@router.callback_query(CallData("depcancel"))
async def dep_cancel_call(callback_query: CallbackQuery):
    data = callback_query.data.split("_")
    mammoth_id = data[1]
    rep_id = data[2]
    replenishments = await BDB.get_replenishment(mammoth_id)

    replenishment = replenishments.split(",")
    for rep in replenishment:
        r = rep.split(";")
        bool_r = bool(rep_id in r)
        if bool_r:
            r[6] = "rejected"
            replenishment.remove(rep)
            r = ";".join(r)
            replenishment.append(r)
            await BDB.update_replenishment(mammoth_id, ",".join(replenishment))
            await callback_query.message.edit_text(text="‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return


@router.callback_query(CallData("wconfirm"))
async def w_confirm_call(callback_query: CallbackQuery):
    data = callback_query.data.split("_")
    mammoth_id = data[1]
    rep_id = data[2]
    withdrawals = await BDB.get_withdrawal_requests(mammoth_id)

    withdrawal = withdrawals.split(",")
    for rep in withdrawal:
        r = rep.split(";")
        bool_r = bool(rep_id in r)
        if bool_r:
            r[4] = "confirmed"
            withdrawal.remove(rep)
            r = ";".join(r)
            withdrawal.append(r)
            await BDB.update_withdrawal_requests(mammoth_id, ",".join(withdrawal))
            await callback_query.message.edit_text(text="‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞.")
            return


@router.callback_query(CallData("wcancel"))
async def w_cancel_call(callback_query: CallbackQuery):
    data = callback_query.data.split("_")
    mammoth_id = data[1]
    rep_id = data[2]
    withdrawals = await BDB.get_withdrawal_requests(mammoth_id)

    withdrawal = withdrawals.split(",")
    for rep in withdrawal:
        r = rep.split(";")
        bool_r = bool(rep_id in r)
        if bool_r:
            r[4] = "rejected"
            withdrawal.remove(rep)
            r = ";".join(r)
            withdrawal.append(r)
            await BDB.update_withdrawal_requests(mammoth_id, ",".join(withdrawal))
            await callback_query.message.edit_text(text="‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return


@router.callback_query(F.data == "edit_balance")
async def edit_balance_call(callback_query: CallbackQuery, state: FSMContext):
    msg = await callback_query.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç—É –≤ —Ä—É–±–ª—è—Ö:",
                                              reply_markup=cancel_action)
    await state.set_state(WorkerActionState.edit_balance)
    await state.update_data(answer_msg=msg.message_id)


@router.callback_query(F.data == "edit_luck")
async def edit_luck_call(callback_query: CallbackQuery, state: FSMContext):
    msg = await callback_query.message.answer(text="–í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å –ø–æ–±–µ–¥—ã –º–∞–º–æ–Ω—Ç—É(–æ—Ç 0 –¥–æ 100):",
                                              reply_markup=cancel_action)
    await state.set_state(WorkerActionState.edit_luck)
    await state.update_data(answer_msg=msg.message_id)


@router.callback_query(F.data == "on_off_stop_lim")
async def on_off_stop_lim_call(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    mammoth_id = data["mammoth_id"]
    stop_lim = await BDB.get_stop_limit(mammoth_id)

    await BDB.update_stop_limit(mammoth_id, not stop_lim)

    bet_status = await BDB.get_bet_status(mammoth_id)
    verified = await BDB.get_verified(mammoth_id)
    await callback_query.message.edit_text(await info_mammoth(BDB, mammoth_id),
                                           reply_markup=mammoth_control_kb(not stop_lim, bet_status, verified))


@router.callback_query(F.data == "edit_sym_stop_lim")
async def edit_sym_stop_lim_call(callback_query: CallbackQuery, state: FSMContext):
    msg = await callback_query.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Å—Ç–æ–ø-–±–∞–ª–∞–Ω—Å–∞ –º–∞–º–æ–Ω—Ç—É:",
                                              reply_markup=cancel_action)
    await state.set_state(WorkerActionState.edit_sym_stop_lim)
    await state.update_data(answer_msg=msg.message_id)


@router.callback_query(F.data == "on_off_bet")
async def on_off_bet_call(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    mammoth_id = data["mammoth_id"]
    bet_status = await BDB.get_bet_status(mammoth_id)

    await BDB.update_bet_status(mammoth_id, not bet_status)

    stop_lim = await BDB.get_stop_limit(mammoth_id)
    verified = await BDB.get_verified(mammoth_id)
    await callback_query.message.edit_text(await info_mammoth(BDB, mammoth_id),
                                           reply_markup=mammoth_control_kb(stop_lim, not bet_status, verified))


@router.callback_query(F.data == "on_off_verification")
async def on_off_verification_call(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    mammoth_id = data["mammoth_id"]
    verified = await BDB.get_verified(mammoth_id)

    await BDB.update_verified(mammoth_id, not verified)

    stop_lim = await BDB.get_stop_limit(mammoth_id)
    bet_status = await BDB.get_bet_status(mammoth_id)
    await callback_query.message.edit_text(await info_mammoth(BDB, mammoth_id),
                                           reply_markup=mammoth_control_kb(stop_lim, bet_status, not verified))


@router.callback_query(F.data == "send_message")
async def send_message_call(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
                                        reply_markup=cancel_action)
    await state.set_state(WorkerActionState.send_message)


@router.callback_query(F.data == "edit_method_withdraw")
async def edit_method_withdraw_call(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    mammoth_id = data["mammoth_id"]
    method_withdraw = await BDB.get_withdrawal_method(mammoth_id)

    if method_withdraw == 4:
        method_withdraw = 1
    else:
        method_withdraw += 1
    await BDB.update_withdrawal_method(mammoth_id, method_withdraw)

    stop_lim = await BDB.get_stop_limit(mammoth_id)
    bet_status = await BDB.get_bet_status(mammoth_id)
    verified = await BDB.get_verified(mammoth_id)
    await callback_query.message.edit_text(await info_mammoth(BDB, mammoth_id),
                                           reply_markup=mammoth_control_kb(stop_lim, bet_status, verified))


@router.callback_query(F.data == "edit_min_dep")
async def edit_edit_min_dep(callback_query: CallbackQuery, state: FSMContext):
    msg = await callback_query.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞/–≤—ã–≤–æ–¥–∞ –º–∞–º–æ–Ω—Ç—É(USD):",
                                              reply_markup=cancel_action)
    await state.set_state(WorkerActionState.edit_min_dep)
    await state.update_data(answer_msg=msg.message_id)


@router.callback_query(F.data == "close_info_menu")
async def close_info_menu_call(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.delete()


@router.callback_query(F.data == "close_action")
async def close_action_call(callback_query: CallbackQuery):
    await callback_query.message.delete()


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_call(callback_query: CallbackQuery):
    await callback_query.message.edit_caption(caption="‚öôÔ∏è –í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å:",
                                              reply_markup=main_worker_kb)


@router.callback_query(F.data == "guide_bot")
async def guide_bot_call(callback_query: CallbackQuery):
    await callback_query.message.edit_caption(caption="""
<b><i>–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–º–æ–Ω—Ç–æ–º –∏ –∏—Ö —Ñ—É–Ω–∫—Ü–∏–∏:</i></b>\n
<b>üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –º–∞–º–æ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é.\n
<b>‚òòÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞—Ä—Ç</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞—Ä—Ç–∞ –≤—Ä—É—á–Ω—É—é.\n
<b>ü§ë –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞/–≤—ã–≤–æ–¥–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.\n
<b>üí∏ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞ –º–∞–º–æ–Ω—Ç—É(–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º –≤ –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ).\n
<b>‚≠ïÔ∏è –í–∫–ª./–í—ã–∫–ª. —Å—Ç–æ–ø-–ª–∏–º–∏—Ç</b> - —Å–ª—É–∂–∏—Ç –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞, —ç—Ç–æ —Ç–æ —Å–∫–æ–ª—å–∫–æ –º–∞–º–æ–Ω—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –±–∏—Ä–∂–∏.\n
<b>‚≠ïÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞ –≤—Ä—É—á–Ω—É—é.\n
<b>üìä –í–∫–ª./–í—ã–∫–ª. —Å—Ç–∞–≤–∫–∏</b> - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞–∫—Ç–∏–≤—ã (—Å—Ç–∞–≤–∫–∏) –¥–ª—è –º–∞–º–æ–Ω—Ç–∞, –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤—ã (–≤–≤–µ—Ä—Ö –≤–Ω–∏–∑, –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è) –ø–æ–∫–∞ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫—É.\n
<b>ü™™ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</b> - –≠—Ç–∞–∫ –∫–Ω–æ–ø–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –º–∞–º–æ–Ω—Ç–∞, –Ω–∞–∂–∏–º–∞–µ–º –≤–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –º–∞–º–æ–Ω—Ç –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –¢–ü(—Ç.–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–∫—É –∏ –ø–æ–ø–æ–ª–Ω–∏–ª –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é).\n
<b>üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ–º—É –º–∞–º–æ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.\n
""", reply_markup=back_to_main_menu)


@router.callback_query(F.data == "currency_rates")
async def currency_rates_call(callback_query: CallbackQuery):
    await callback_query.message.edit_caption(caption="""
<b><i>üíµ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–æ—Ç–µ:</i></b>\n
<i>USD/RUB - <b>100</b></i>
<i>USD/UAH - <b>40</b></i>
<i>USD/KZT - <b>450</b></i>
""", reply_markup=back_to_main_menu)


@router.callback_query(F.data == "rek_withdraw")
async def rek_withdraw_call(callback_query: CallbackQuery):
    await callback_query.message.edit_caption(caption=f"*üí≥ –†–µ–∫–∏ –º–∞–º–æ–Ω—Ç—É\\:*\n\n`{rek_withdrawal}`",
                                              reply_markup=back_to_main_menu,
                                              parse_mode="MarkdownV2")


@router.callback_query(F.data == "ref_id")
async def ref_id_call(callback_query: CallbackQuery):
    await callback_query.message.edit_caption(caption=f"""
ü§ñ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –º–∞–º–æ–Ω—Ç–∞:\n
https://t.me/MEXC_tradingBot?start={callback_query.from_user.id}
""", reply_markup=back_to_main_menu)


@router.callback_query(F.data == "my_mammoths")
async def my_mammoths_call(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    data = await BDB.get_all_worker_mammoths(str(user_id))
    print(data)
    if data:
        await callback_query.message.edit_reply_markup(reply_markup=await paginator_mammoths(data[0:4]))
    else:
        await callback_query.answer(text="‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤(", show_alert=True)


@router.callback_query(PaginatorMammoths.filter())
async def paginator_mammoths_callback(call: CallbackQuery, callback_data: PaginatorMammoths):
    user_id = call.from_user.id
    data = await BDB.get_all_worker_mammoths(str(user_id))
    page_num = int(callback_data.page)
    page = page_num - 1 if page_num > 0 else 0

    if callback_data.action == "next":
        page = page_num + 1 if page_num < ceil((len(data) / 5)) - 1 else page_num

    with suppress(TelegramBadRequest):
        await call.message.edit_reply_markup(
            reply_markup=await paginator_mammoths(data[(page * 5):(page * 5 + 5)],
                                                  page=page))


@router.callback_query(CallData("mammoths"))
async def info_mammoths_call(callback_query: CallbackQuery):
    data = callback_query.data.split("_")
    mammoth_id = data[1]

    verified = await BDB.get_verified(mammoth_id)
    balance = await BDB.get_balance(mammoth_id)
    stop_lim = await BDB.get_stop_limit(mammoth_id)
    stop_lim_sym = await BDB.get_sym_stop_limit(mammoth_id)

    await callback_query.answer(text=f"""
üÜî: {mammoth_id}
üí∞ –ë–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞: {balance} USD
üë®‚Äçüíª –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {"‚úÖ" if verified else "‚ùå"}
‚≠ïÔ∏è –°—Ç–æ–ø-–ª–∏–º–∏—Ç: {"‚úÖ" if stop_lim else "‚ùå"}
‚≠ïÔ∏è –°—Ç–æ–ø-–ª–∏–º–∏—Ç —Å—É–º–º–∞: {stop_lim_sym}$
""", show_alert=True)


@router.callback_query(CallData("mc"))
async def info_mammoths_call(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data.split("_")
    mammoth_id = int(data[1])

    await state.update_data(mammoth_id=mammoth_id)

    stop_lim = await BDB.get_stop_limit(mammoth_id)
    bet_status = await BDB.get_bet_status(mammoth_id)
    verified = await BDB.get_verified(mammoth_id)
    msg = await callback_query.message.answer(await info_mammoth(BDB, mammoth_id),
                                              reply_markup=mammoth_control_kb(stop_lim, bet_status, verified))
    await state.update_data(msg_id=msg.message_id)
